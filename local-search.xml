<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NLP项目和论文搜索</title>
    <link href="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    <url>/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="NLP项目的一般解决思路"><a href="#NLP项目的一般解决思路" class="headerlink" title="NLP项目的一般解决思路"></a>NLP项目的一般解决思路</h1><img src="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AAAI%E9%A1%B9%E7%9B%AE.png" class=""><h1 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h1><h2 id="Aspect情感分析项目"><a href="#Aspect情感分析项目" class="headerlink" title="Aspect情感分析项目"></a>Aspect情感分析项目</h2><img src="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/Aspect%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90%E9%A1%B9%E7%9B%AE.png" class=""><h2 id="8个维度的属性分类项目"><a href="#8个维度的属性分类项目" class="headerlink" title="8个维度的属性分类项目"></a>8个维度的属性分类项目</h2><img src="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/8%E4%B8%AA%E7%BB%B4%E5%BA%A6%E5%B1%9E%E6%80%A7%E8%AF%8D%E5%88%A4%E6%96%AD%E9%A1%B9%E7%9B%AE.png" class=""><h2 id="iPredict项目"><a href="#iPredict项目" class="headerlink" title="iPredict项目"></a>iPredict项目</h2><img src="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/iPredict%E9%A1%B9%E7%9B%AE.png" class=""><h2 id="品牌识别项目"><a href="#品牌识别项目" class="headerlink" title="品牌识别项目"></a>品牌识别项目</h2><img src="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/%E5%93%81%E7%89%8C%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE.png" class=""><h2 id="购买意向项目"><a href="#购买意向项目" class="headerlink" title="购买意向项目"></a>购买意向项目</h2><img src="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/%E8%B4%AD%E4%B9%B0%E6%84%8F%E5%90%91%E9%A1%B9%E7%9B%AE.png" class=""><h2 id="域适应翻译项目"><a href="#域适应翻译项目" class="headerlink" title="域适应翻译项目"></a>域适应翻译项目</h2><img src="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/%E5%9F%9F%E9%80%82%E5%BA%94%E7%BF%BB%E8%AF%91%E9%A1%B9%E7%9B%AE.png" class=""><h2 id="序列分类和整体情感项目"><a href="#序列分类和整体情感项目" class="headerlink" title="序列分类和整体情感项目"></a>序列分类和整体情感项目</h2><img src="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/%E5%BA%8F%E5%88%97%E5%88%86%E7%B1%BB%E5%9E%8B%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90%E9%A1%B9%E7%9B%AE.png" class=""><h2 id="品牌和功效关系项目"><a href="#品牌和功效关系项目" class="headerlink" title="品牌和功效关系项目"></a>品牌和功效关系项目</h2><img src="/2022/02/22/NLP%E9%A1%B9%E7%9B%AE%E5%92%8C%E8%AE%BA%E6%96%87%E6%90%9C%E7%B4%A2/%E5%93%81%E7%89%8C%E5%8A%9F%E6%95%88%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E9%A1%B9%E7%9B%AE.png" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一个小的子列表位置查找函数</title>
    <link href="/2022/02/22/python-list/"/>
    <url>/2022/02/22/python-list/</url>
    
    <content type="html"><![CDATA[<h1 id="sublist是original列表中的一部分，即子列表，如果存在sublist，那么就返回起始和结束位置，否则返回None"><a href="#sublist是original列表中的一部分，即子列表，如果存在sublist，那么就返回起始和结束位置，否则返回None" class="headerlink" title="sublist是original列表中的一部分，即子列表，如果存在sublist，那么就返回起始和结束位置，否则返回None"></a>sublist是original列表中的一部分，即子列表，如果存在sublist，那么就返回起始和结束位置，否则返回None</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vim">def index_partof_list(original, sublist):<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br>    子列表查找, 也可以用于字符串的查找<br>    :param original: 一个列表<br>    :<span class="hljs-built_in">type</span> original:<br>    :param sublist: sublist是original列表中的一部分，即子列表，如果存在sublist，那么就返回起始和结束位置，否<br>则返回None<br>    :<span class="hljs-built_in">type</span> sublist:<br>    :<span class="hljs-keyword">return</span>: 返回<span class="hljs-number">2</span>个值，bool值和查找到的索引值，如果没查找到返回[] 如果找到一个或找到多个，返回 [(x1,y1),(x2,y2)]<br>    :rtype:<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br>    ori_len = <span class="hljs-built_in">len</span>(original)<br>    sub_len = <span class="hljs-built_in">len</span>(sublist)<br>    find_indexes = []<br>    <span class="hljs-keyword">if</span> ori_len &lt; sub_len:<br>        <span class="hljs-keyword">return</span> find_indexes<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">index</span> in <span class="hljs-built_in">range</span>(ori_len-sub_len+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> original[<span class="hljs-built_in">index</span>:<span class="hljs-built_in">index</span> + sub_len] == sublist:<br>            find_indexes.<span class="hljs-keyword">append</span>((<span class="hljs-built_in">index</span>, <span class="hljs-built_in">index</span>+ sub_len))<br>    <span class="hljs-keyword">return</span> find_indexes<br><br>ori = [<span class="hljs-string">&#x27;《&#x27;</span>, <span class="hljs-string">&#x27;邪&#x27;</span>, <span class="hljs-string">&#x27;少&#x27;</span>, <span class="hljs-string">&#x27;兵&#x27;</span>, <span class="hljs-string">&#x27;王&#x27;</span>, <span class="hljs-string">&#x27;》&#x27;</span>, <span class="hljs-string">&#x27;是&#x27;</span>, <span class="hljs-string">&#x27;冰&#x27;</span>, <span class="hljs-string">&#x27;火&#x27;</span>, <span class="hljs-string">&#x27;未&#x27;</span>, <span class="hljs-string">&#x27;央&#x27;</span>, <span class="hljs-string">&#x27;写&#x27;</span>, <span class="hljs-string">&#x27;的&#x27;</span>, <span class="hljs-string">&#x27;网&#x27;</span>, <span class="hljs-string">&#x27;络&#x27;</span>, <span class="hljs-string">&#x27;小&#x27;</span>, <span class="hljs-string">&#x27;说&#x27;</span>, <span class="hljs-string">&#x27;连&#x27;</span>, <span class="hljs-string">&#x27;载&#x27;</span>, <span class="hljs-string">&#x27;于&#x27;</span>, <span class="hljs-string">&#x27;旗&#x27;</span>, <span class="hljs-string">&#x27;峰&#x27;</span>, <span class="hljs-string">&#x27;天&#x27;</span>, <span class="hljs-string">&#x27;下&#x27;</span>]<br>sub = [<span class="hljs-string">&#x27;网&#x27;</span>, <span class="hljs-string">&#x27;络&#x27;</span>, <span class="hljs-string">&#x27;小&#x27;</span>, <span class="hljs-string">&#x27;说&#x27;</span>]<br><span class="hljs-keyword">res</span> = index_partof_list(ori,sub)<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">res</span>)<br>------&gt;<br>[(<span class="hljs-number">13</span>, <span class="hljs-number">17</span>)]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对存在过合并的excel的单元格进行处理</title>
    <link href="/2022/02/22/pandas-na/"/>
    <url>/2022/02/22/pandas-na/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>日常我们经常遇到表头是合并的单元格，如左侧表头，或者上测表头都是合并过的，而我们想读取使用pandas读取的excel后，每列都进行对应回原来的数据的结构，那么这时就需要进行填充了，因为读取后，只有合并的单元格的第一行或第一列是有值的，其它都是nan，我们需要用前向填充的方法，ffill()<br>示例如图:</p><img src="/2022/02/22/pandas-na/shili1.png" class=""><h1 id="填充代码，可以给定超参数，填充表头，按行和按列填充"><a href="#填充代码，可以给定超参数，填充表头，按行和按列填充" class="headerlink" title="填充代码，可以给定超参数，填充表头，按行和按列填充"></a>填充代码，可以给定超参数，填充表头，按行和按列填充</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_pdna</span>(<span class="hljs-params">df, row=[], col=[]</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    当excel的表头的行或列有合并单元格的情况时，只有第一个单元格是正确的，值，这时候需要使用前向填充ffill，即使用上一个单元格的内容填充当前为nan的单元格</span><br><span class="hljs-string">    但是填充的时候一般进行限制，只填充表头的前几行，或前几列</span><br><span class="hljs-string">    :param df:</span><br><span class="hljs-string">    :type df:</span><br><span class="hljs-string">    :param row: [] 表示所有行都使用前面的值进行填充，1表示第一行, eg: [1,2] 表示第1，2行用前面的值填充</span><br><span class="hljs-string">    :param col: []表示，所有列都使用前面的值填充， 0表示第一列, 注意行和列的其实索引位置不一样</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    :rtype:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 首先对行进行填充，填充哪些行</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> row:<br>        <span class="hljs-comment"># 如果为空，先按行进行填充，行空的时候使用前一个单元格填充</span><br>        df = df.ffill(axis=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> col:<br>        <span class="hljs-comment"># 然后对列进行填充</span><br>        df = df.ffill(axis=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> col:<br>        <span class="hljs-keyword">for</span> col_num <span class="hljs-keyword">in</span> col:<br>            df[col_num] = df[col_num].ffill(axis=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> row:<br>        <span class="hljs-keyword">for</span> row_num <span class="hljs-keyword">in</span> row:<br>            df[:row_num] = df[:row_num].ffill(axis=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> df<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_excel</span>(<span class="hljs-params">excel_file</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    读取excel内容</span><br><span class="hljs-string">    :param excel_file:</span><br><span class="hljs-string">    :type excel_file:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    :rtype:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;开始读取<span class="hljs-subst">&#123;excel_file&#125;</span>&quot;</span>)<br>    df = pd.read_excel(excel_file, header=<span class="hljs-literal">None</span>)<br>    newdf = fill_pdna(df, row=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], col=[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(newdf)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shap值的探索，判断shap值是否符合基本单调递增</title>
    <link href="/2022/02/18/shap-explore2/"/>
    <url>/2022/02/18/shap-explore2/</url>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ol><li>构建一个模型，本示例用的XGBoost，然后构建shap解释模型，使用shap值对模型特征进行解释</li><li>按特征重要性，这里对应的是shap值的绝对值的均值，shap_values.abs.mean，进行排序</li><li>如果特征符合基本单调递增, 不一定是线性的，因为特征之间可能有相关性,打印对应shap值为0附近的原始特征数值，用原始特征的均值代替</li></ol><h1 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h1><p>我们构建的是一个客户满意度模型，使用的是用户对一个商品的整体满意度与商品的各个属性满意度之间的关系，我们想找出当每个属性的满意度达到多少时，才能对整体满意度产生影响，即各个属性满意度的理想值。</p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xgboost<br><span class="hljs-keyword">import</span> shap<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br>mpl.rcParams[<span class="hljs-string">&#x27;font.family&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>mpl.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><br>saved_file = <span class="hljs-string">&#x27;/tmp/adult.pkl&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump_info</span>(<span class="hljs-params">data</span>):<br>    pickle.dump(data, <span class="hljs-built_in">open</span>(saved_file, <span class="hljs-string">&quot;wb&quot;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;保存成功&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_info</span>():<br>    data = pickle.load(<span class="hljs-built_in">open</span>(saved_file, <span class="hljs-string">&quot;rb&quot;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加载成功&quot;</span>)<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-keyword">if</span> os.path.exists(saved_file):<br>    X,y = load_info()<br><span class="hljs-keyword">else</span>:<br>    X,y = shap.datasets.adult()<br>    dump_info(data=(X,y))<br>model = xgboost.XGBClassifier().fit(X, y)<br><br><span class="hljs-comment"># compute SHAP values</span><br>explainer = shap.Explainer(model, X)<br>shap_values = explainer(X)<br><span class="hljs-comment"># shap_values [num_samples, num_features]</span><br><span class="hljs-comment"># shap.plots.beeswarm(shap_values)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_closely_sublist</span>(<span class="hljs-params">src_list, percent=<span class="hljs-number">0.05</span>, des_num=<span class="hljs-number">0.3</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    找出src_list 中与des_num最接近的数字，找到总数量的为百分之percent</span><br><span class="hljs-string">    :param src_list:</span><br><span class="hljs-string">    :type src_list: list</span><br><span class="hljs-string">    :param percent:</span><br><span class="hljs-string">    :type percent:</span><br><span class="hljs-string">    :param des_num:</span><br><span class="hljs-string">    :type des_num:</span><br><span class="hljs-string">    :return: 返回百分之percent的数据的个数的列表，列表是src_list的子列表</span><br><span class="hljs-string">    :rtype:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 取值为0范围的%5的数</span><br>    total_num = <span class="hljs-built_in">len</span>(src_list)<br>    got_num = <span class="hljs-built_in">int</span>(total_num * percent)<br>    left_num = right_num = <span class="hljs-built_in">int</span>(got_num/<span class="hljs-number">2</span>)<br>    sorted_l = <span class="hljs-built_in">sorted</span>(src_list)<br>    <span class="hljs-comment">#定位与0最接近的位置的索引</span><br>    min_closest_idx = <span class="hljs-number">0</span><br>    min_closed_distance = <span class="hljs-number">100000</span><br>    <span class="hljs-keyword">for</span> idx, i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(sorted_l):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(i - des_num) &lt; min_closed_distance:<br>            min_closed_distance = <span class="hljs-built_in">abs</span>(i - des_num)<br>            min_closest_idx = idx<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最接近于<span class="hljs-subst">&#123;des_num&#125;</span>的数字是<span class="hljs-subst">&#123;sorted_l[min_closest_idx]&#125;</span>&quot;</span>)<br>    start_idx = min_closest_idx - left_num<br>    <span class="hljs-keyword">if</span> start_idx &lt; <span class="hljs-number">0</span>:<br>        start_idx = <span class="hljs-number">0</span><br>    end_idx = min_closest_idx + right_num<br>    sublist = sorted_l[start_idx:end_idx]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;收集接近于目标值<span class="hljs-subst">&#123;des_num&#125;</span>, 总数据条数:<span class="hljs-subst">&#123;total_num&#125;</span>, 收集占比为<span class="hljs-subst">&#123;percent&#125;</span>,共收集到数据条数: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(sublist)&#125;</span>条，分别是: <span class="hljs-subst">&#123;sublist&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> sublist<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_middle_data</span>(<span class="hljs-params">mean_shape</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根据给定的shap，获取shap值为0时，原始data的值，因为有的值不是单递增的，还要判断是否是单调递增的， 统计的方法判断</span><br><span class="hljs-string">    根据均值和中位数，判断是否是单调递增的，大部分不是线性递增的</span><br><span class="hljs-string">    :param mean_shape:</span><br><span class="hljs-string">    :type mean_shape:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    :rtype:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    feature_name = mean_shape.feature_names<br>    shape_value = mean_shape.values<br>    feature_data = mean_shape.data<br>    <span class="hljs-comment"># 按大小排序</span><br>    sort_shap = np.sort(shape_value)<br>    sort_shap = sort_shap.tolist()<br>    <span class="hljs-comment"># 最接近0的shap值，大概5%</span><br>    sublist = find_closely_sublist(src_list=sort_shap,percent=<span class="hljs-number">0.05</span>, des_num=<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 取0轴为的5%的数</span><br>    start_threhold, end_threhold = <span class="hljs-built_in">min</span>(sublist), <span class="hljs-built_in">max</span>(sublist)<br>    zero_range_shap_idx = np.where((shape_value &gt;= start_threhold) &amp; (shape_value &lt;= end_threhold))<br>    <span class="hljs-comment">#判断是否单调的问题，大部分shap值小于zero附近shap的，它对应的原始特征数也小于，shap值大于zero附近的，它的原始特征对应的数据也大于zero的原始特征，咱们都用平均值和中位数2个结合判断</span><br>    zero_range_data = feature_data[zero_range_shap_idx]<br>    zero_data_mean = np.mean(zero_range_data)<br>    zero_data_median = np.median(zero_range_data)<br>    less_zero_shap_idx = np.where(shape_value &lt; start_threhold)<br>    biger_zero_shap_idx = np.where(shape_value &gt; end_threhold)<br>    less_zero_data = feature_data[less_zero_shap_idx]<br>    biger_zero_data = feature_data[biger_zero_shap_idx]<br>    less_zero_mean = np.mean(less_zero_data)<br>    less_zero_median = np.median(less_zero_data)<br>    biger_zero_mean = np.mean(biger_zero_data)<br>    biger_zero_median = np.median(biger_zero_data)<br>    <span class="hljs-keyword">if</span> less_zero_mean &lt; zero_data_mean &lt; biger_zero_mean <span class="hljs-keyword">and</span> less_zero_median &lt; zero_data_median &lt; biger_zero_median:<br>        <span class="hljs-comment">#基本上是单调递增的，那么返回0的附近的对应的原始数据的均值, 即zero_data_mean</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, zero_data_mean, feature_name<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-number">0</span>, feature_name<br><br><span class="hljs-comment"># 打印前10个特征，按照shap值的重要性排序</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>):<br>    mean_shape = shap_values[:, shap_values.<span class="hljs-built_in">abs</span>.mean(<span class="hljs-number">0</span>).argsort[-i]]<br>    is_monotone, middle_data, feature_name = get_middle_data(mean_shape)<br>    fig = plt.gcf()<br>    fig.set_size_inches(<span class="hljs-number">18.5</span>, <span class="hljs-number">10.5</span>, forward=<span class="hljs-literal">True</span>)<br>    ax = fig.gca()<br>    <span class="hljs-keyword">if</span> is_monotone:<br>        title = <span class="hljs-string">f&quot;特征<span class="hljs-subst">&#123;i&#125;</span>_<span class="hljs-subst">&#123;feature_name&#125;</span>是基本上是单调递增的，对应的shap值0附近的原始特征数据均值值是:<span class="hljs-subst">&#123;middle_data&#125;</span>&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        title = <span class="hljs-string">f&quot;特征<span class="hljs-subst">&#123;i&#125;</span>_<span class="hljs-subst">&#123;feature_name&#125;</span>不是单调递增的&quot;</span><br>    ax.set_title(title)<br>    shap.plots.scatter(shap_values = mean_shape, ax=ax)<br></code></pre></td></tr></table></figure><h1 id="绘图结果，按照特征重要性进行的排序"><a href="#绘图结果，按照特征重要性进行的排序" class="headerlink" title="绘图结果，按照特征重要性进行的排序"></a>绘图结果，按照特征重要性进行的排序</h1><img src="/2022/02/18/shap-explore2/shap1.png" class=""><img src="/2022/02/18/shap-explore2/shap2.png" class=""><img src="/2022/02/18/shap-explore2/shap3.png" class=""><img src="/2022/02/18/shap-explore2/shap4.png" class=""><img src="/2022/02/18/shap-explore2/shap5.png" class=""><img src="/2022/02/18/shap-explore2/shap6.png" class=""><img src="/2022/02/18/shap-explore2/shap7.png" class=""><img src="/2022/02/18/shap-explore2/shap8.png" class=""><img src="/2022/02/18/shap-explore2/shap9.png" class="">]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
